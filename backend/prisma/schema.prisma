// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum GoalStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELED
}

enum ReportType {
  BLOOD_TEST
  CHECKUP
  DIAGNOSIS
}

enum UserGroupRole {
  ADMIN
  MEMBER
  GUEST
}

enum MealPlanStatus {
  DRAFT
  ACTIVE
  COMPLETED
}

enum Role {
  STANDARD
  PROFESSIONAL
}

enum WeekDay {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role       Role
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  deleted_at  DateTime? 
}

model Food {
  id          Int       @id @default(autoincrement())
  name        String
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  created_at  DateTime
  deleted_at  DateTime?
  updated_at  DateTime?

  recipeFoods   RecipeFood[]
  foodConsumed  FoodConsumed[]
}

model Recipe {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  calories         Float
  preparation_time Int       @default(0)
  portion          Int       @default(1)
  created_at       DateTime  @default(now())
  deleted_at       DateTime?
  updated_at       DateTime?
  recipeFoods      RecipeFood[]
  mealPlanRecipes  MealPlanRecipe[]
  foodConsumed     FoodConsumed[]
}

model PreparationMethod {
  id                Int     @id @default(autoincrement())
  name              String
  description       String?
  created_at        DateTime
  deleted_at        DateTime?
  updated_at        DateTime?

  recipeFoods RecipeFood[]
}

model RecipeFood {
  id                     Int       @id @default(autoincrement())
  id_food                Int
  id_recipe              Int
  id_preparation_method  Int?
  id_unit_of_measurement Int
  nutrition_value        Float
  image                  Bytes?
  created_at             DateTime  @default(now())
  updated_at             DateTime  @updatedAt
  deleted_at             DateTime?

  food                   Food                @relation(fields: [id_food], references: [id])
  recipe                 Recipe              @relation(fields: [id_recipe], references: [id])
  unit_of_measurement    UnitOfMeasurement   @relation(fields: [id_unit_of_measurement], references: [id])
  preparationMethod      PreparationMethod?  @relation(fields: [id_preparation_method], references: [id])
}

model Patient {
  id              Int          @id @default(autoincrement())
  id_user         Int          @unique
  id_nutritionist Int?
  created_at      DateTime
  deleted_at      DateTime?
  updated_at      DateTime?

  healthData   HealthData[]
  goals        Goal[]
  reports      Report[]
  mealPlans    MealPlan[]
  nutritionistPatients  NutritionistPatient[]

  nutritionist Nutritionist? @relation(fields: [id_nutritionist], references: [id])
}

model Nutritionist {
  id                   Int       @id @default(autoincrement())
  id_user              Int       @unique
  professional_register String
  created_at           DateTime
  deleted_at           DateTime?
  updated_at           DateTime?

  patients   Patient[]
  mealPlans  MealPlan[]
  nutritionistPatients  NutritionistPatient[]
}

model HealthData {
  id          Int      @id @default(autoincrement())
  id_patient  Int
  height      Float
  weight      Float
  bmi         Float
  record_date DateTime
  created_at  DateTime
  deleted_at  DateTime?
  updated_at  DateTime?

  patient Patient @relation(fields: [id_patient], references: [id])
}

model Goal {
  id           Int      @id @default(autoincrement())
  id_patient   Int
  description  String?
  start_date   DateTime
  end_date     DateTime?
  status       GoalStatus
  created_at   DateTime
  deleted_at   DateTime?
  updated_at   DateTime?

  goalObjectives GoalObjective[] 
  mealPlans MealPlan[]

  patient   Patient   @relation(fields: [id_patient], references: [id])
}

model Objective {
  id          Int      @id @default(autoincrement())
  name        String
  icon        String?
  description String?
  created_at  DateTime
  deleted_at  DateTime?
  updated_at  DateTime?

  goalObjectives GoalObjective[]   
}

model Preference {
  id         Int       @id @default(autoincrement())
  name       String
  icon       String?
  notes      String?
  created_at DateTime
  deleted_at DateTime?
  updated_at DateTime?

  mealPreferences MealPreference[]
}

model MealPreference {
  id            Int       @id @default(autoincrement())
  id_meal       Int
  id_preference Int
  created_at    DateTime
  deleted_at    DateTime?
  updated_at    DateTime?

  meal       Meal       @relation(fields: [id_meal], references: [id])
  preference Preference @relation(fields: [id_preference], references: [id])
}

model DietaryRestriction {
  id         Int       @id @default(autoincrement())
  name       String
  description String?
  icon       String?
  created_at DateTime
  deleted_at DateTime?
  updated_at DateTime?

  mealPlanDietaryRestrictions MealPlanDietaryRestriction[]
}

model MealPlanDietaryRestriction {
  id                     Int                @id @default(autoincrement())
  id_dietary_restriction Int
  id_meal_plan           Int
  created_at             DateTime
  deleted_at             DateTime?
  updated_at             DateTime?

  dietaryRestriction DietaryRestriction @relation(fields: [id_dietary_restriction], references: [id])
  mealPlan           MealPlan          @relation(fields: [id_meal_plan], references: [id])
}

model Report {
  id          Int       @id @default(autoincrement())
  id_patient  Int
  type        ReportType
  generated_at DateTime
  created_at  DateTime
  deleted_at  DateTime?
  updated_at  DateTime?

  patient Patient @relation(fields: [id_patient], references: [id])
}

model MealPlan {
  id              Int       @id @default(autoincrement())
  id_patient      Int
  id_nutritionist Int
  id_goal         Int
  calories        Int
  status          MealPlanStatus
  expiration_date DateTime?
  created_at      DateTime
  deleted_at      DateTime?
  updated_at      DateTime?

  patient     Patient     @relation(fields: [id_patient], references: [id])
  nutricionist Nutritionist @relation(fields: [id_nutritionist], references: [id])
  goal   Goal   @relation(fields: [id_goal], references: [id])

  mealPlanMeals             MealPlanMeal[]
  mealPlanDietaryRestrictions MealPlanDietaryRestriction[]
}

model MealPlanRecipe {
  id            Int      @id @default(autoincrement())
  id_recipe     Int
  id_meal_plan_meal  Int
  created_at    DateTime
  deleted_at    DateTime?
  updated_at    DateTime?

  recipe   Recipe   @relation(fields: [id_recipe], references: [id])
  mealPlanMeal MealPlanMeal @relation(fields: [id_meal_plan_meal], references: [id])
}

model Meal {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime
  deleted_at  DateTime?
  updated_at  DateTime?

  mealPreferences MealPreference[]
  mealPlanMeals   MealPlanMeal[]
}

model MealPlanMeal {
  id           Int       @id @default(autoincrement())
  id_meal_plan Int
  id_meal      Int
  time         DateTime? @db.Time
  day          WeekDay?
  created_at   DateTime
  deleted_at   DateTime?
  updated_at   DateTime?

  mealPlan MealPlan @relation(fields: [id_meal_plan], references: [id])
  meal     Meal     @relation(fields: [id_meal], references: [id])
  mealPlanRecipes           MealPlanRecipe[]
  foodConsumed    FoodConsumed[]
}

model FoodConsumed {
  id        Int      @id @default(autoincrement())
  id_meal_plan_meal   Int
  id_food   Int?
  id_recipe Int?
  id_unit_of_measurement Int
  quantity  Float
  date      DateTime
  created_at DateTime
  deleted_at DateTime?
  updated_at DateTime?

  mealPlanMeal MealPlanMeal @relation(fields: [id_meal_plan_meal], references: [id])
  food   Food?  @relation(fields: [id_food], references: [id])
  recipe Recipe? @relation(fields: [id_recipe], references: [id])
  unitOfMeasurement UnitOfMeasurement? @relation(fields: [id_unit_of_measurement], references: [id])
}

model UserGroup {
  id         Int      @id @default(autoincrement())
  id_user    Int
  id_group   Int
  role       UserGroupRole
  created_at DateTime
  deleted_at DateTime?
  updated_at DateTime?

  group Group @relation(fields: [id_group], references: [id])
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  decription  String?
  invite_code String
  created_at  DateTime
  deleted_at  DateTime?
  updated_at  DateTime?

  userGroups UserGroup[]
}

model GoalObjective {
  id            Int      @id @default(autoincrement())
  id_goal       Int
  id_objective  Int
  created_at    DateTime
  deleted_at    DateTime?
  updated_at    DateTime?

  goal Goal @relation(fields: [id_goal], references: [id])
  objective Objective @relation(fields: [id_objective], references: [id])
}

model UnitOfMeasurement {
  id         Int       @id @default(autoincrement())
  name       String
  symbol     String?
  created_at DateTime  @default(now())
  updated_at DateTime?  
  deleted_at DateTime?

  foodConsumed FoodConsumed[]  
  recipeFood RecipeFood[]
}

model NutritionistPatient {
  id                Int       @id @default(autoincrement())
  id_nutritionist   Int
  id_patient        Int
  created_at        DateTime  @default(now())
  updated_at        DateTime?  
  deleted_at        DateTime?

  nutritionist Nutritionist @relation(fields: [id_nutritionist], references: [id])
  patient Patient @relation(fields: [id_patient], references: [id])
}








